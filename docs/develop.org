#+STARTUP: overview
#+OPTIONS: ^:nil
#+OPTIONS: p:t

** Tasks
*** Manuscript 
**** Post-paper iterations
***** Iteration 1 (content and readability)
****** TODO Further work
******* for the target audience of end-users -> how can a user make use of the regex model
******* bring up human survey in further work or discussion and also in methods
******* encode information on the position of the pattern where it got maxed out -> might help to encode information in longer documents
******* visualize examples/classes where regex and neural model align and misalign, eg. with a confusion matrix
******* add meta-text for padding and linking
******* improve overall readability
****** Conclusions
******* mention new purpose of TauSTE layer
******* improve overall readability

***** Iteration 2 (consistency and formatting)
****** Terminologies and abbreviations
******* consider adding abbreviations directly into definitions
******* fine-tune preprocessing vs. pre-processing
******* fine-tune antecedent/proxy terminology and synchronize everywhere
******* fine-tune usage of string length and document length while consuming
******* fine-tune usage of document vs. input utterance
******* fine-tune usage of consume a token and not consume a symbol
******* fine-tune usage of patterns vs. substrings vs. WFAs
******* fine-tune usage of TauSTE neurons and output neurons -> especially for RQ3
******* fine-tune string consumption vs. string matching
******* fine-tune WFA to mean either automata or automaton, make plural abbreviation WFAs clear
******* fine-tune usage of FA vs. NFA and make these consistent with abbreviations versus full
******* fine-tune the slot-filling terminology 
******* fine-tune terminology between intent detection and intent classification
******* fine-tune terminology between data set and partition
******* fine-tune token length, sentence length and utterance length
******* fine-tune regex vs. RE
******* fine-tune usage of the RE lookup layer
******* fine-tune linear vs. linear regression layer
******* fine-tune FMTOD data set vs. intent detection task
******* fine-tune explainability method vs. technique
******* fine-tune study vs. thesis
******* fine-tune final vs. end vs. accepting states
******* ensure linear-chain and strict linear-chain are added before WFAs
******* ensure pattern length is replaced by the number of states
******* define GPU somewhere and add to abbreviation
******* replace all epsilon words by the symbol where possible 
******* make number of decimal places consistent wherever they are used such as in tables with tau
******* replace string length with token count -> think of how and where this makes sense
******* sort out all abbreviations and standardize formatting in terms of where they are first declared -> perhaps add a page number on list of abbreviations to indicate first declaration -> consider using a package to help with this process
****** Formatting
******* ensure that areas between chapters-sections and/or sections-subsections are filled with explanatory text to provide a narrative -> use links to/from individual sections/chapters to string everything together -> no area between title and next sub-title or environment should be empty -> an example is adding text before WFA definitions
******* EITHER quote + indent sentences directly taken from other studies with page and section OR paraphrase them and leave them in a definition environment
******* check that all borrowed figures have an explicit attribution such as "taken from paper et al (year)"
******* change red link color in table of contents and modify color of URLs
******* re-read all figure and table captions to ensure they make sense and are written well -> remove schematic for better readability -> remove visualization as well since it is redundant
******* abstract and introduction should already mention key findings -> synthesize these -> mention TauSTE layer with new purpose
******* consider replacing all wildcard regex with single slash \s
****** Formalities
******* 20-90 pages thesis length -> well-motivated yet succinct
******* add remaining features by referring to master template such as abstract (short summarized introduction), list of tables/figures/abbreviations, appendices, etc; see master document for examples
******* date on bottom of manuscript should be date of submission before mailing to Potsdam
******* add student registration details to paper such as matriculation number and other details
******* update title page date to current submission date
******* take note of all other submission criteria such as statement of originality, German abstract, digital copy and others, see: https://www.uni-potsdam.de/en/studium/studying/organizing-your-exams/final-thesis
****** Bibliography
******* improve capitalization with braces in bibtex file
******* find alternative journal/conference citations for current arxiv papers
****** Final steps
******* perform spell-check of all text
******* re-read paper for flow and sensibility 

*** Programming
**** Clean-code and documentation
***** Source-code
****** rename RegexSoftPatternClassifier class to RegexProxy if possible without breakages
****** change light, medium and heavy to small, medium and large in all scripts, filenames and log variables consistently
****** remove all neural sopa from readme and everywhere else since spp already implies neural -> consider changing parser arguments as well if possible for consistency from --neural-model-checkpoint to --spp-model-checkpoint
****** add a comment above each code chunk which explains inner mechanisms better
****** add pydocstrings to all functions and improve argparse documentation -> maybe not necessary
***** Readme
****** update readme and usages with finalized antecedent and proxy terminologies 
****** upadte readme and usages with finalized STE/output neurons terminologies
****** rename all mentions of regex to RE in readme if this is possible
****** add information on best model downloads and preparation -> add these to Google Drive later on
****** update metadata eg. with comprehensive python/shell help scripts, comments describing functionality and readme descriptions for git hooks
****** test out all shell-scripts and python code to make sure everything works the same after major renamings
****** test download and all other scripts to ensure they work
****** perform spell-check on readme 
**** Dependencies, typing and testing
***** if using R, document R dependencies with ~sessionInfo()~
***** look into cases where List was replaced by Sequential and how this can be changed or understood to keep consistency (ie. keep everything to List with overloads)
***** GPU/CPU runs not always reproducible depending on multi-threading, see: https://pytorch.org/docs/stable/notes/randomness.html#reproducibility

** Notes
*** Admin
**** Timeline
***** +Initial thesis document: *15.09.2020*+
***** +Topic proposal draft: *06.11.2020*+
***** +Topic proposal final: *15.11.2020*+
***** +Topic registration: *01.02.2021*+
***** Offical manuscript submission: *12.04.2021*

** Legacy
*** Interpretable RNN architectures
**** State-regularized-RNNs (SR-RNNs)
***** good: very powerful and easily interpretable architecture with extensions to NLP and CV
***** good: simple code which can probably be ported to PyTorch relatively quickly
***** good: contact made with author and could get advice for possible extensions
***** problematic: code is outdated and written in Theano, TensorFlow version likely to be out by end of year
***** problematic: DFA extraction from SR-RNNs is clear, but DPDA extraction/visualization from SR-LSTMs is not clear probably because of no analog for discrete stack symbols from continuous cell (memory) states
***** possible extensions: port state-regularized RNNs to PyTorch (might be simple since code-base is generally simple), final conversion to REs for interpretability, global explainability for natural language, adding different loss to ensure words cluster to same centroid as much as possible -> or construct large automata, perhaps pursue sentiment analysis from SR-RNNs perspective instead and derive DFAs to model these
**** Rational recurences (RRNNs)
***** good: code quality in PyTorch, succinct and short
***** good: heavy mathematical background which could lend to more interesting mathematical analyses
***** problematic: seemingly missing interpretability section in paper -> theoretical and mathematical, which is good for understanding
***** problematic: hard to draw exact connection to interpretability, might take too long to understand everything
**** Finite-automation-RNNs (FA-RNNs)
***** source code likely released by November, but still requires initial REs which may not be present -> might not be the best fit
***** FA-RNNs involving REs and substitutions could be useful extensions as finite state transducers for interpretable neural machine translation

*** Interpretable surrogate extraction
***** overall more costly and less chance of high performance       
***** FA/WFA extraction
****** spectral learning, clustering
****** less direct interpretability
****** more proof of performance needed -> need to show it is better than simple data learning

*** Neuro-symbolic paradigms
***** research questions
****** can we train use a neuro-symbolic paradigm to attain high performance (similar to NNs) for NLP task(s)?
****** if so, can this paradigm provide us with greater explainability about the inner workings of the model?

*** Neural decision trees
***** decision trees are the same as logic programs -> the objective should be to learn logic programs
***** hierarchies are constructed in weight-space which lends itself to non-sequential models very well -> but problematic for token-level hierarchies
***** research questions
****** can we achieve similar high performance using decision tree distillation techniques (by imitating NNs)?
****** can this decision tree improve interpretability/explainability?
****** can this decision tree distillation technique outperform simple decision tree learning from training data?

*** Inductive logic on NLP search spaces
***** can potentially use existing IM models such as paraphrase detector for introspection purposes in thesis
***** n-gram power sets to explore for statistical artefacts -> ANNs can only access the search space of N-gram power sets -> solution to NLP tasks must be a statistical solution within the power sets which links back to symbolism
***** eg. differentiable ILP from DeepMind
***** propositional logic only contains atoms while predicate/first-order logic contain variables      
