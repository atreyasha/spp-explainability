#+STARTUP: overview
#+OPTIONS: ^:nil
#+OPTIONS: p:t

** Tasks
*** Current
**** Dedicated explainability
***** Generic changes
****** update readme and usage scripts with changes made so far
****** clean out source code with newer and more efficient workflows, consistent variable namings and function definitions on-the-fly -> start off with =explain_data=
****** precisely type functions and classes on-the-fly -> especially for explainability scripts
****** sort out scattered TODOs
***** Global explainability
****** compatibility issues
******* synchronize all changes in the oracle model into the mimic model
******* figure out why many end tokens occur after each other in output patterns and how to remedy these illogical pattern types -> seems to be fixed by reducing =num_padding_tokens= to =0= so it seems something is off with offsetting technique used in backpointer display
******* consider removing =num_padding_tokens= and emulate from other scripts
******* look into to/from-semiring functions are not used, especially for log-space semiring
******* look into legacy =visualization*= scripts to ensure no workarounds during debugging were transferred causing wrong indices 
******* modify =get_nearest_neighbors= to use full embeddings and to use biases as well -> if this is indeed necessary after understanding
******* look into =end_states= and other tensors which need to be expanded based on batch dimension
******* fix problem of double increment jumps in token indices -> possibly fixed but unsure
******* replace nested zip with nested list comp of =zip_lambda_2d= function -> perhaps same for =cat_2d= function
******* add all conditionals related to epsilons and SL (or wildcards) to explainability script as per =visualize_efficiently=
******* fix =max_doc_len= for explainability and emulate from modelling scripts
******* fix looping over transition matrices as per modelling scripts
******* consider removing =detach= calls on registered buffers since they have no gradients, and instead just use =clone= -> but need to check this to be sure
****** check if it is possible to port the entire backpointer concept inside the sopa model as an exec-mode
****** consider modifying model forward to conditionally return scores and other tensors before linear layer -> preferably as a concatenated tensor -> then can simply use model outputs instead of computing them from scratch as is currently done in explain script
****** consider adding softmax to model forward if this is of any use
****** consider adding NullPointer instead of padding -> might help distinguish
****** zero and restart padding used in model, but only restart padding used in explain script -> incompatibilities between transitons_once functions -> now we no longer need zero padding in transitions
****** binarizer and layer normalization output should be used for explainability to ignore all other patterns -> might help with explainability
****** think about how to work with unknown tokens on new data for mimic model
****** perhaps keep the existing nearest neighbours functionality to deal with similar patterns with different tokens
****** introduce new function for loading and dumping patterns to intercommunicate between mimic/oracle models -> utilize output-prefix argument when dumping output patterns file
****** look into =visualize_efficiently= and =interpret_classification_results= scripts for possible workflows to adopt
****** develop merging framework where regular expressions are generalized from all the best patterns available -> produce pretty and compact ensemble of regular expressions, perhaps with graphviz
***** Execution speed
****** use tqdm to help with estimations
****** search for more efficient back-pointer python implementation
****** look into torch semiring times function which could be a bottleneck or otherwise use timing analysis to find bottleneck
****** can offer GPU for model-based exection, but main explainability must happen on the CPU; multiple threads would be a bonus here for overall speed
****** check if batch-level processing is possible as per training workflow
****** merge efficiencies from =visualize_efficiently= script, for example using =heapq= for binary search tree
****** consider keeping =explain_labels= or removing these altogether -> not sure how they could still be of use later on in explainability
***** Quantification of global explainability potential
****** perhaps do a check between model forward and explain forward to ensure they are the same as a failsafe
****** compare confusion matrices between oracle and mimic and compute euclidean distances over raw softmax predictions
****** demonstrate when global explainability aligns well and when it does not
****** can be done for both the train and test partitions to check for extrapolation potential for explainability
****** find tricks which help to increase generalization -> or at least discuss them
***** Local explainability as a failsafe
****** in cases where global explainability cannot be deciphered, we can provide a failsafe of local explainability
****** this can be done a per-sample basis with pattern and score specification -> more likely to be useful on the test set

**** Post explainability
***** Extension to new data sets
****** consider extending workflow to ATIS and/or SNIPS
****** re-use preprocessing functions by sending them to utils and perhaps make them more general where possible
****** both have some papers which could be cited to add some relevance
***** Dedicated modelling
****** add 2 threads specific arguments to jarvis shell scripts
****** attempt to make normalizer dynamically ignore infinities instead of expecting fixed sizes
****** consider adding back elementwise affine transformations for LayerNorm -> but this could possibly result in dead patterns to be activated which is an illogical result
****** consider using a generic function for batch minima, since this could be dependent on the semiring
****** encourage learning of wildcards by increasing its scale factor default -> in case there are not enough
****** change frequency of tensorboard, evaluation and model saving to update-level
******* update arg parser with new arguments
******* update train_inner with new workflow for saving/loading information
******* update save checkpoint code with required information
******* shift torch hooks around to be more sensible
******* convert data object to generator
****** *extra:* repeat grid-search with multiple random seeds -> do this after all changes
****** *extra:* use parallelized computations to fill up all GPU memory -> would require reading-up on how to do this safely for a single GPU
       
*** Long-term
**** Performance and explainability
***** add check to ensure start, end and pad tokens don't occur adversarially inside sequence -> need to have the vocabulary object catch such an error
***** add predict function for both mimic and oracle model which does not need extra data to be loaded -> can also accept stdin as unix pipe
***** when comparing model performance with other studies, consider only lowercasing and not making unique the test set
***** check if packed sequences could be incoporated into model
**** Re-check potential pitfalls
***** add =with torch.no_grad()= scope indicator alongside =model.eval()= to perform inference/validation correctly and efficiently
***** replace all legacy =tensor.data= calls with =tensor.detach()= for safety and =tensor.detach().clone()= for cases where data is being updated
***** check code for =squeeze()= call which can be problematic for dim 1 tensors
**** Dependencies, typing and testing
***** use =renv= for managing and shipping R dependencies -> keep just =renv.lock= for easier shipping and ignore other files
***** include basic test code by instantiating class and/or other simple methods which are inherent to the workflow
***** add mypy as an explicit part of testing the source code
***** consider adding Optional type to all optional arguments instead of Union + None
***** look into cases where List was replaced by Sequential and how this can be changed or understood to keep consistency (ie. keep everything to List)
**** Documentation
***** read paper again to get some familiarity with terms and algorithms
***** find better naming for mimic/oracle models which is based on research terminology
***** GPU/CPU runs not always reproducible depending on multi-threading, see: https://pytorch.org/docs/stable/notes/randomness.html#reproducibility
***** consider renaming =soft_patterns_pp= to more elegant name without special symbols such as =spp= or better -> be useful to think of this before registering topic
***** reduce source code lines, chunking and comments -> pretty sort python code and function/class orders perhaps by length
***** update metadata eg. with comprehensive python/shell help scripts, comments describing functionality and readme descriptions for git hooks
***** add information on best model downloads and preparation
***** add pydocstrings to all functions and improve argparse documentation
***** provide description of data structures (eg. data, labels) required for training processes
***** test download and all other scripts to ensure they work
      
** Notes
*** Research
**** SoPa++
***** extensions
****** leverage dynamic sub-word-level embeddings from recent advancements in Transformer-based language modeling.
****** modify the architecture and hyperparameters to use more wildcards or self-loops, and verify the usefulness of these in the mimic WFSA models.
****** modify the output multi-layer perceptron layer to a general additive layer, such as a linear regression layer, with various basis functions. This would allow for easier interpretation of the importance of patterns without the use of occlusion -> perhaps consider adding soft logic functions which could emulate negation/inclusion of rules, or possibly a soft decision tree at the top layer
****** test SoPa++ on multi-class text classification tasks 
      
**** SoPa
***** goods: practical new architecture which maps to RNN-CNN mix via WFSAs, decent code quality in PyTorch (still functional), contact made with author and could get advice for possible extensions
***** limitations
****** SoPa utilizes static word-level token embeddings which might contribute to less dynamic learning and more overfitting towards particular tokens
****** SoPa encourages minimal learning of wildcards/self-loops and $\epsilon$-transitions, which leads to increased overfitting on rare words such as proper nouns
****** while SoPa provides an interpretable architecture to learn discrete word-level patterns, it is also utilizes occlusion to determine the importance of various patterns. Occlusion is usually a technique reserved for uninterpretable model architectures and contributes little to global explainability
****** SoPa was only tested empirically on binary text classification tasks
***** general: likely higher performance due to direct inference and less costly conversion methods

**** Data sets
***** NLU data sets -> single sequence intent classification, typically many classes involved -> eg. ATIS, Snips, AskUbuntuCorpus, FB task oriented dataset (mostly intent classifications)
***** SOTA scores for NLU can be found on https://github.com/nghuyong/rasa-nlu-benchmark#result
***** vary training data sizes from 10% to 70% for perspective on data settings

**** Constraints
***** work with RNNs only
***** seq2cls tasks -> eg. NLU/NLI/semantic tasks, try to work with simpler single (vs. double) sequence classification task
***** base main ideas off peer-reviewed articles 

**** Research questions
***** To what extent does SoPa++ contribute to competitive performance on NLU tasks?
***** To what extent does SoPa++ contribute to improved explainability by simplification?
***** What interesting and relevant explanations does SoPa++ provide on NLU task(s)?

*** Administrative
**** Timeline
***** +Initial thesis document: *15.09.2020*+
***** +Topic proposal draft: *06.11.2020*+
***** +Topic proposal final: *15.11.2020*+
***** Topic registration: *01.02.2021* 
***** Manuscript submission: *31.03.2021* 

**** Manuscript notes
***** Text-related feedback
****** 20-90 pages thesis length -> try to keep ideas well-motivated yet succinct
****** make abstract more specific in terms of "highly performant"
****** fix absolute terms such as "automated reasoning", or quote directly from paper
****** re-consider reference to Transformers for dynamic sub-word level word-embeddings
****** improve capitalization with braces in bibtex file
***** Concept-related feedback
****** clarify meaning and concept of "occlusion" as leave-one-out perturbation analysis
****** cite and explain straight-through estimation (STE) with Heaviside variant
****** improve arbitrary vs. contrained oracle phrasing -> perhaps black-box vs. white-box but more specific
****** expound on trade-off between performance and explainability and process of mimic extraction
****** add more information on what competitive performance means (eg. within few F_1 points)
****** how to evaluate improved explainability -> make hierarchy for local vs. global explainability -> also explainability is only relevant if the oracle and mimic models both *perform competitively and have similar confusion matrix profiles* (both conditions must be satisfied)
****** how does binarizing help with explainability?
****** how does this new framework improve explainability over the previous baseline? explain either via hierarchies, metrics or tangible task-based insights
****** how can a user make use of the mimic model and what benefits are there for the user in terms of security/safety/etc?
****** think more about points to include or mention weakly instead of strongly in paper such as something is better or worse
****** further work: porting this technique to a transformer where possible
***** Self-thoughts
****** use graphical TikZ editor for creating graphs 
****** add visualization of in-depth computational graph in paper for clarity
****** compare oracle performance with those from other papers
****** semirings, abstract algebra and how they are used for finite-state machines in Forward and Viterbi algorithms -> go deeper into this to get some background
****** use more appropriate and generalized semiring terminology from Peng et al. 2019 -> more generalized compared to SoPa paper
****** Chomsky hierarchy of languages -> might be relevant especially relating to CFGs
****** FSA/WFSAs -> input theoretical CS, mathematics background to describe these
****** ANN's historical literature -> describe how ANNs approximate symbolic representations
****** extension/recommendations -> transducer for seq2seq tasks
       
** Completed
***** DONE modify normalizer to ignore calculation of all infinities via minimal value replacement
      CLOSED: [2021-01-27 Wed 19:19]
***** DONE remove both epsilon/self-loops -> use only simple transitions and hard wild cards 
      CLOSED: [2021-01-27 Wed 15:01]
***** DONE defaults from paper: semiring -> max-product, batch-size -> 128 (cpu), epochs -> 200, patience -> 30, word_dim -> 300
      CLOSED: [2021-01-02 Sat 14:23]
***** DONE reduce circum-padding token count to 1 instead of length of longest pattern
      CLOSED: [2020-12-31 Thu 13:03]
***** DONE test out to see if scheduler works and if its state gets incremented -> need to train single model for long period of time and analyze state_dict of scheduler to see what has been recorded -> it works well when clip threshold is set to zero and patience is observed
      CLOSED: [2020-12-31 Thu 13:01]
***** DONE log model metrics with intra/inter-epoch frequency which can be shared with tqdm for displaying -> would require some recoding with modulos -> how to manage updates with batch vs. epochs conflict and how to continue training as well, think about whether to recompute accuracy as well on a batch-basis
      CLOSED: [2020-12-22 Tue 12:22]
***** DONE add argparse option of how often to update tqdm metrics in training -> should be shared parameter for tensorboard logging 
      CLOSED: [2020-12-22 Tue 12:22]
***** DONE make consistent use of =validation= versus =dev= throughout all source code -> redo all log messages and also file naming especially related to inputs, preprocessing and argparse -> will require time and effort
      CLOSED: [2020-12-20 Sun 17:49]
***** DONE remove =rnn= option from code altogether -> keep things simple for now
      CLOSED: [2020-12-19 Sat 02:33]
***** DONE change argparse variable names within train script to reflect parser and make this consistent throughout, including in other auxiliary scripts
      CLOSED: [2020-12-19 Sat 01:33]
***** DONE need to understand =nn.Module= functionality before anything else -> investigate whether =fixed_var= function is indeed necessary or can be removed since =requires_grad= is set to False by default, but could be some conflict with =nn.Module= default parameter construction with ~requires_grad = True~ -> left intact for now and appears to work well 
      CLOSED: [2020-12-12 Sat 12:28]
***** DONE look through =train.py= and make comments on general processes -> fix minor issues where present such as variable naming, formatting etc.
      CLOSED: [2020-12-08 Tue 18:38]
***** DONE major code refactoring for main model with conversion to recent PyTorch (eg. 1.*) and CUDA versions (eg. 10.*)
      CLOSED: [2020-12-05 Sat 18:47] DEADLINE: <2020-12-06 Sun>
***** DONE add tensorboard to explicit dependencies to view relevant logs during training
      CLOSED: [2020-12-03 Thu 14:40]
***** DONE replace all Variable calls with simple Tensors and add =requires_grad= argument directly to tensors where this is necessary: see https://stackoverflow.com/questions/57580202/whats-the-purpose-of-torch-autograd-variable
      CLOSED: [2020-12-02 Wed 21:50]
***** DONE UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument
      CLOSED: [2020-12-02 Wed 18:57]
***** DONE UserWarning: size_average and reduce args will be deprecated, please use reduction='sum' instead
      CLOSED: [2020-12-02 Wed 18:39]
***** DONE make workflow to download Facebook Multilingual Task Oriented Dataset and pre-process to sopa-ready format -> text data and labels with dictionary mapping as to what the labels mean
      CLOSED: [2020-12-01 Tue 20:29] DEADLINE: <2020-12-03 Thu>
***** DONE fixed: UserWarning: nn.functional.sigmoid is deprecated. Use torch.sigmoid instead
      CLOSED: [2020-11-30 Mon 18:16]
***** DONE sort CLI arguments into proper groups, sort them alphabetically for easier reading
      CLOSED: [2020-11-30 Mon 18:07]
***** DONE add types to =parser_utils.py= script internals
      CLOSED: [2020-11-30 Mon 18:07]
***** DONE separate extras in =soft_patterns.py= into =utils.py= -> test out how batch is utilized -> fix batch issue, then move on to other steps -> batch mini-vocab appears to be a hack to create a meta-vocabulary for indices -> try to push with this again another time -> consider reverting Vocab index/token defaults in case this was wrong
      CLOSED: [2020-11-30 Mon 18:07]
***** DONE appears to be major bug in Batch class, try to verify if it is indeed a bug and how it can be fixed
      CLOSED: [2020-11-30 Mon 18:07]
***** DONE extract all arg parser chunks and place in dedicated file
      CLOSED: [2020-11-30 Mon 18:07]
***** DONE clean preprocessing script for GloVe vectors and understand inner mechanisms
      CLOSED: [2020-11-28 Sat 17:02]
***** DONE find better location to place code from =util.py=
      CLOSED: [2020-11-27 Fri 19:38]
***** DONE migrate to soft-patterns-pp and clean from there
      CLOSED: [2020-11-26 Thu 20:11]
***** DONE update proposal with comments from supervisors -> update same information here
      CLOSED: [2020-11-17 Tue 14:52] DEADLINE: <2020-11-17 Tue>
***** DONE write proposal with key research questions -> address points directly from step 3 document requirements -> prepare some basic accuracy metrics and interpretations from best model   
      CLOSED: [2020-11-10 Tue 18:45] DEADLINE: <2020-11-06 Fri>
***** DONE analyze pattern log more closely with code on the side to understand what it means -> can start writing early when things start to make sense
      CLOSED: [2020-11-10 Tue 18:44] DEADLINE: <2020-11-05 Thu>
***** DONE add large amounts of binary data for testing with CPU/GPU -> requires pre-processing
      CLOSED: [2020-11-10 Tue 18:21]
***** DONE find re-usable code for running grid search -> otherwise construct makeshift quick code
      CLOSED: [2020-11-05 Thu 20:38]
***** DONE test SoPa on sample data in repository to ensure it works out-of-the-box -> try this on laptop and s3it 
      CLOSED: [2020-11-02 Mon 16:40]
***** DONE make workflow to reproduce virtual environment cleanly via poetry
      CLOSED: [2020-11-02 Mon 16:34]
***** DONE make workflow to download simple but high-quality NLU dataset and glove data sets
      CLOSED: [2020-11-01 Sun 20:15] DEADLINE: <2020-11-01 Sun>
***** DONE read more into these tasks and find one that has potential for interpretability -> likely reduce task to binary case for easier processing (eg. entailment)
      CLOSED: [2020-10-28 Wed 15:32] DEADLINE: <2020-10-28 Wed>
***** DONE search for popular NLI datasets which have existing RNN models as (almost) SOTAs, possibly use ones that were already tested for eg. RTC or ones used in papers that may have semantic element
      CLOSED: [2020-10-26 Mon 17:57] DEADLINE: <2020-10-28 Wed>
***** DONE explore below frameworks (by preference) and find most feasible one
      CLOSED: [2020-10-26 Mon 14:28] DEADLINE: <2020-10-26 Mon>
***** DONE add org-mode hook to remove startup visibility headers in org-mode to markdown conversion
      CLOSED: [2020-10-22 Thu 13:28]
***** DONE Set up repo, manuscript and develop log
      CLOSED: [2020-10-22 Thu 12:36]
      
** Legacy
*** Interpretable RNN architectures
**** State-regularized-RNNs (SR-RNNs)
***** good: very powerful and easily interpretable architecture with extensions to NLP and CV
***** good: simple code which can probably be ported to PyTorch relatively quickly
***** good: contact made with author and could get advice for possible extensions
***** problematic: code is outdated and written in Theano, TensorFlow version likely to be out by end of year
***** problematic: DFA extraction from SR-RNNs is clear, but DPDA extraction/visualization from SR-LSTMs is not clear probably because of no analog for discrete stack symbols from continuous cell (memory) states
***** possible extensions: port state-regularized RNNs to PyTorch (might be simple since code-base is generally simple), final conversion to REs for interpretability, global explainability for natural language, adding different loss to ensure words cluster to same centroid as much as possible -> or construct large automata, perhaps pursue sentiment analysis from SR-RNNs perspective instead and derive DFAs to model these
**** Rational recurences (RRNNs)
***** good: code quality in PyTorch, succinct and short
***** good: heavy mathematical background which could lend to more interesting mathematical analyses
***** problematic: seemingly missing interpretability section in paper -> theoretical and mathematical, which is good for understanding
***** problematic: hard to draw exact connection to interpretability, might take too long to understand everything
**** Finite-automation-RNNs (FA-RNNs)
***** source code likely released by November, but still requires initial REs which may not be present -> might not be the best fit
***** FA-RNNs involving REs and substitutions could be useful extensions as finite state transducers for interpretable neural machine translation

*** Interpretable surrogate extraction
***** overall more costly and less chance of high performance       
***** FSA/WFSA extraction
****** spectral learning, clustering
****** less direct interpretability
****** more proof of performance needed -> need to show it is better than simple data learning

*** Neuro-symbolic paradigms
***** research questions
****** can we train use a neuro-symbolic paradigm to attain high performance (similar to NNs) for NLP task(s)?
****** if so, can this paradigm provide us with greater explainability about the inner workings of the model?

*** Neural decision trees
***** decision trees are the same as logic programs -> the objective should be to learn logic programs
***** hierarchies are constructed in weight-space which lends itself to non-sequential models very well -> but problematic for token-level hierarchies
***** research questions
****** can we achieve similar high performance using decision tree distillation techniques (by imitating NNs)?
****** can this decision tree improve interpretability/explainability?
****** can this decision tree distillation technique outperform simple decision tree learning from training data?

*** Inductive logic on NLP search spaces
***** can potentially use existing IM models such as paraphrase detector for introspection purposes in thesis
***** n-gram power sets to explore for statistical artefacts -> ANNs can only access the search space of N-gram power sets -> solution to NLP tasks must be a statistical solution within the power sets which links back to symbolism
***** eg. differentiable ILP from DeepMind
***** propositional logic only contains atoms while predicate/first-order logic contain variables      
      
