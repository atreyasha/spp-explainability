#+STARTUP: overview
#+OPTIONS: ^:nil
#+OPTIONS: p:t

** Tasks
*** Current
**** TODO Complete model improvements and run SoPa++ for grid runs
     DEADLINE: <2021-01-07 Thu>
***** Modify final layer to a general additive layer
****** construct various basis functions such as linear, polynomial etc; see: https://stackoverflow.com/questions/55920015/how-to-realize-a-polynomial-regression-in-pytorch-python
****** binarize patterns via =torch.gt= or =torch.relu= if possible which would make interpretation much easier
****** think of ways to use patterns only when there are enough words in front and not to always compute, if this is possible at all
***** Make separate shell scripts for single, grid, resume single and resume grid
***** Create =slurm-s3it= and =gpu= branches -> adjust batch sizes and other parameters for system-level optimizations

**** Add test evaluation workflow with independent script
     DEADLINE: <2021-01-10 Sun>
***** Compute test F1 on models at the end of training for completeness
***** Removal of predict function inside model, but could be added back if this becomes boilerplate later in testing script
***** Think again about adding model.eval() and model.train() inside functions, or to keep outside in more global context
***** Tokenizer configuration should also be saved such as nltk punkt tokenizer, if something like this is present, currently we use nltk tokenizer which is fixed within the current nltk version
***** Test code should use model vocabulary directly -> this can be used to ensure everything is within model
***** Use modular loading frameworks similar to continue training when loading back the model

**** With decent model performance, branch off to improve explainability with weighting of patterns to address other research questions
     DEADLINE: <2021-02-12 Fri>
***** Oracle model
****** refactor =visualization= and =interpretation= (two of highest priority) and understand their internal mechanisms
****** why are =[START]= and =[END]= tokens repeated before and after?
******* overfitting that occurs to extra =[START]= and =[END]= tokens would be transferred to epsilon transitions if replaced with single padding instead of multiple
******* posted as question to OP, see: https://github.com/Noahs-ARK/soft_patterns/issues/8#issuecomment-746797695
***** Mimic model
****** find better naming for mimic/oracle from papers
****** final ensemble of regular expressions should give insights and perform similar to main SoPa++ neural model
****** think about how to work with unknown tokens on new data for mimic model -> maybe some mapping of embeddings to find closest token/pattern or mean score might help
****** best case scenario: user should be able to transfer easily between models and regex-ensemble in both directions for "human-computer interaction" 
****** for mimic model, find best patterns that match, if not use a mean value for the pattern score that can be used as an analog -> or try other heuristics that can bring results of mimic and oracle closer to each other
****** aim to produce pretty and compact ensemble of regular expressions which can analyzed and manipulated by a human
****** posted question to OP on self-loops visualization, see: https://github.com/Noahs-ARK/soft_patterns/issues/8#issuecomment-728257052
***** Distance between oracle and mimic
****** it would still be useful to show when mimic and oracle align and when they don't -> with some kind of distance measurement between their output scores
****** compare confusion matrices between orace and mimic and compute euclidean distances on scores or binary predictions
***** Look into ATIS/SNIPS dataset as additional data-sets
****** re-use preprocessing functions by sending them to utils and perhaps make them more general where possible
****** both have some papers which could be cited to add some relevance
***** Test workflow for loading pre-computed-patterns to ensure they work without bugs -> missing load information for self-loops, might bug out for case with no self_loops because of index 1 of =diags= and =bias= being updated which is only present with self_loops, perhaps replace with index of -1
 
*** Long-term
**** Performance
***** add check to ensure start, end and pad tokens don't occur adversarially inside sequence -> need to have the vocabulary object catch such an error
***** add predict function for both mimic and oracle model which does not need extra data to be loaded
***** check if packed sequences could be incoporated into model
**** Re-check potential pitfalls
***** add =with torch.no_grad()= scope indicator alongside =model.eval()= to perform inference/validation correctly and efficiently -> check other areas where this can be done
***** check to ensure detach and clones are done together where variable is created and updated, or otherwise detach is done for variables where only data needs to be referenced
***** replace all legacy tensor.data calls with tensor.detach() for safety
***** check code for =squeeze()= call which can be problematic for dim 1 tensors
**** Dependencies, typing and testing
***** use =renv= for managing and shipping R dependencies -> keep just =renv.lock= for easier shipping and ignore other files
***** include test code by instantiating class and/or other simple methods which are inherent to the workflow
***** add mypy as an explicit part of testing the source code
***** consider adding Optional type to all optional arguments
***** look into cases where List was replaced by Sequential and how this can be changed or understood to keep consistency (ie. keep everything to List)
**** Documentation
***** improve cryptic parts of code such as issue with loading patterns inside torch model
***** reduce source code lines, chunking and comments -> pretty sort python code and functions
***** consider re-ordering functions/classes by length of each function so code flows naturally downwards
***** update metadata eg. with comprehensive python/shell help scripts, comments describing functionality and readme descriptions for git hooks
***** add pydocstrings to all functions and improve argparse documentation
***** provide description of data structures (eg. data, labels) required for training processes
***** make list of all useful commands for slurm -> useful to re-use later on
***** test download and all other scripts to ensure they work
***** GPU/CPU runs not always reproducible depending on multi-threading, see: https://pytorch.org/docs/stable/notes/randomness.html#reproducibility
***** add MIT license when made public
      
** Notes
*** Research
**** SoPa++
***** extensions
****** leverage dynamic sub-word-level embeddings from recent advancements in Transformer-based language modeling.
****** modify the architecture and hyperparameters to use more wildcards or self-loops, and verify the usefulness of these in the mimic WFSA models.
****** modify the output multi-layer perceptron layer to a general additive layer, such as a linear regression layer, with various basis functions. This would allow for easier interpretation of the importance of patterns without the use of occlusion -> perhaps consider adding soft logic functions which could emulate negation/inclusion of rules, or possibly a soft decision tree at the top layer
****** test SoPa++ on multi-class text classification tasks 
      
**** SoPa
***** goods: practical new architecture which maps to RNN-CNN mix via WFSAs, decent code quality in PyTorch (still functional), contact made with author and could get advice for possible extensions
***** limitations
****** SoPa utilizes static word-level token embeddings which might contribute to less dynamic learning and more overfitting towards particular tokens
****** SoPa encourages minimal learning of wildcards/self-loops and $\epsilon$-transitions, which leads to increased overfitting on rare words such as proper nouns
****** while SoPa provides an interpretable architecture to learn discrete word-level patterns, it is also utilizes occlusion to determine the importance of various patterns. Occlusion is usually a technique reserved for uninterpretable model architectures and contributes little to global explainability
****** SoPa was only tested empirically on binary text classification tasks
***** general: likely higher performance due to direct inference and less costly conversion methods

**** Data sets
***** NLU data sets -> single sequence intent classification, typically many classes involved -> eg. ATIS, Snips, AskUbuntuCorpus, FB task oriented dataset (mostly intent classifications)
***** SOTA scores for NLU can be found on https://github.com/nghuyong/rasa-nlu-benchmark#result
***** vary training data sizes from 10% to 70% for perspective on data settings

**** Constraints
***** work with RNNs only
***** seq2cls tasks -> eg. NLU/NLI/semantic tasks, try to work with simpler single (vs. double) sequence classification task
***** base main ideas off peer-reviewed articles 

**** Research questions
***** To what extent does SoPa++ contribute to competitive performance on NLU tasks?
***** To what extent does SoPa++ contribute to improved explainability by simplification?
***** What interesting and relevant explanations does SoPa++ provide on NLU task(s)?

*** Admin
**** Timeline
***** +Initial thesis document: *15.09.2020*+
***** +Topic proposal draft: *06.11.2020*+
***** +Topic proposal final: *15.11.2020*+
***** Topic registration: *01.02.2021* 
***** Manuscript submission: *18.03.2021* 

**** Manuscript notes
***** Text-related feedback
****** 20-90 pages thesis length -> try to keep ideas well-motivated yet succinct
****** make abstract more specific in terms of "highly performant"
****** sub-word embeddings are both useful for performance and explainability
****** fix absolute terms such as "automated reasoning", or quote directly from paper
****** re-consider reference to Transformers for dynamic sub-word level word-embeddings
****** improve capitalization with braces in bibtex file
***** Concept-related feedback
****** clarify meaning and concept of "occlusion" as leave-one-out perturbation analysis
****** improve arbitrary vs. contrained oracle phrasing -> perhaps black-box vs. white-box but more specific
****** expound on trade-off between performance and explainability and process of mimic extraction
****** add more information on what competitive performance means (eg. within few F_1 points)
****** how to evaluate improved explainability -> make hierarchy for local vs. global explainability -> also explainability is only relevant if the oracle and mimic models both *perform competitively and have similar confusion matrix profiles* (both conditions must be satisfied)
****** further work: porting this technique to a transformer where possible
***** Self-thoughts
****** compare oracle performance with those from other papers
****** semirings, abstract algebra and how they are used for finite-state machines in Forward and Viterbi algorithms -> go deeper into this to get some background
****** use more appropriate and generalized semiring terminology from Peng et al. 2019 -> more generalized compared to SoPa paper
****** Chomsky hierarchy of languages -> might be relevant especially relating to CFGs
****** FSA/WFSAs -> input theoretical CS, mathematics background to describe these
****** ANN's historical literature -> describe how ANNs approximate symbolic representations
****** extension/recommendations -> transducer for seq2seq tasks
       
** Completed
***** DONE defaults from paper: semiring -> max-product, batch-size -> 128 (cpu), epochs -> 200, patience -> 30, word_dim -> 300
      CLOSED: [2021-01-02 Sat 14:23]
***** DONE reduce circum-padding token count to 1 instead of length of longest pattern
      CLOSED: [2020-12-31 Thu 13:03]
***** DONE test out to see if scheduler works and if its state gets incremented -> need to train single model for long period of time and analyze state_dict of scheduler to see what has been recorded -> it works well when clip threshold is set to zero and patience is observed
      CLOSED: [2020-12-31 Thu 13:01]
***** DONE log model metrics with intra/inter-epoch frequency which can be shared with tqdm for displaying -> would require some recoding with modulos -> how to manage updates with batch vs. epochs conflict and how to continue training as well, think about whether to recompute accuracy as well on a batch-basis
      CLOSED: [2020-12-22 Tue 12:22]
***** DONE add argparse option of how often to update tqdm metrics in training -> should be shared parameter for tensorboard logging 
      CLOSED: [2020-12-22 Tue 12:22]
***** DONE make consistent use of =validation= versus =dev= throughout all source code -> redo all log messages and also file naming especially related to inputs, preprocessing and argparse -> will require time and effort
      CLOSED: [2020-12-20 Sun 17:49]
***** DONE remove =rnn= option from code altogether -> keep things simple for now
      CLOSED: [2020-12-19 Sat 02:33]
***** DONE change argparse variable names within train script to reflect parser and make this consistent throughout, including in other auxiliary scripts
      CLOSED: [2020-12-19 Sat 01:33]
***** DONE need to understand =nn.Module= functionality before anything else -> investigate whether =fixed_var= function is indeed necessary or can be removed since =requires_grad= is set to False by default, but could be some conflict with =nn.Module= default parameter construction with ~requires_grad = True~ -> left intact for now and appears to work well 
      CLOSED: [2020-12-12 Sat 12:28]
***** DONE look through =train.py= and make comments on general processes -> fix minor issues where present such as variable naming, formatting etc.
      CLOSED: [2020-12-08 Tue 18:38]
***** DONE major code refactoring for main model with conversion to recent PyTorch (eg. 1.*) and CUDA versions (eg. 10.*)
      CLOSED: [2020-12-05 Sat 18:47] DEADLINE: <2020-12-06 Sun>
***** DONE add tensorboard to explicit dependencies to view relevant logs during training
      CLOSED: [2020-12-03 Thu 14:40]
***** DONE replace all Variable calls with simple Tensors and add =requires_grad= argument directly to tensors where this is necessary: see https://stackoverflow.com/questions/57580202/whats-the-purpose-of-torch-autograd-variable
      CLOSED: [2020-12-02 Wed 21:50]
***** DONE UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument
      CLOSED: [2020-12-02 Wed 18:57]
***** DONE UserWarning: size_average and reduce args will be deprecated, please use reduction='sum' instead
      CLOSED: [2020-12-02 Wed 18:39]
***** DONE make workflow to download Facebook Multilingual Task Oriented Dataset and pre-process to sopa-ready format -> text data and labels with dictionary mapping as to what the labels mean
      CLOSED: [2020-12-01 Tue 20:29] DEADLINE: <2020-12-03 Thu>
***** DONE fixed: UserWarning: nn.functional.sigmoid is deprecated. Use torch.sigmoid instead
      CLOSED: [2020-11-30 Mon 18:16]
***** DONE sort CLI arguments into proper groups, sort them alphabetically for easier reading
      CLOSED: [2020-11-30 Mon 18:07]
***** DONE add types to =parser_utils.py= script internals
      CLOSED: [2020-11-30 Mon 18:07]
***** DONE separate extras in =soft_patterns.py= into =utils.py= -> test out how batch is utilized -> fix batch issue, then move on to other steps -> batch mini-vocab appears to be a hack to create a meta-vocabulary for indices -> try to push with this again another time -> consider reverting Vocab index/token defaults in case this was wrong
      CLOSED: [2020-11-30 Mon 18:07]
***** DONE appears to be major bug in Batch class, try to verify if it is indeed a bug and how it can be fixed
      CLOSED: [2020-11-30 Mon 18:07]
***** DONE extract all arg parser chunks and place in dedicated file
      CLOSED: [2020-11-30 Mon 18:07]
***** DONE clean preprocessing script for GloVe vectors and understand inner mechanisms
      CLOSED: [2020-11-28 Sat 17:02]
***** DONE find better location to place code from =util.py=
      CLOSED: [2020-11-27 Fri 19:38]
***** DONE migrate to soft-patterns-pp and clean from there
      CLOSED: [2020-11-26 Thu 20:11]
***** DONE update proposal with comments from supervisors -> update same information here
      CLOSED: [2020-11-17 Tue 14:52] DEADLINE: <2020-11-17 Tue>
***** DONE write proposal with key research questions -> address points directly from step 3 document requirements -> prepare some basic accuracy metrics and interpretations from best model   
      CLOSED: [2020-11-10 Tue 18:45] DEADLINE: <2020-11-06 Fri>
***** DONE analyze pattern log more closely with code on the side to understand what it means -> can start writing early when things start to make sense
      CLOSED: [2020-11-10 Tue 18:44] DEADLINE: <2020-11-05 Thu>
***** DONE add large amounts of binary data for testing with CPU/GPU -> requires pre-processing
      CLOSED: [2020-11-10 Tue 18:21]
***** DONE find re-usable code for running grid search -> otherwise construct makeshift quick code
      CLOSED: [2020-11-05 Thu 20:38]
***** DONE test SoPa on sample data in repository to ensure it works out-of-the-box -> try this on laptop and s3it 
      CLOSED: [2020-11-02 Mon 16:40]
***** DONE make workflow to reproduce virtual environment cleanly via poetry
      CLOSED: [2020-11-02 Mon 16:34]
***** DONE make workflow to download simple but high-quality NLU dataset and glove data sets
      CLOSED: [2020-11-01 Sun 20:15] DEADLINE: <2020-11-01 Sun>
***** DONE read more into these tasks and find one that has potential for interpretability -> likely reduce task to binary case for easier processing (eg. entailment)
      CLOSED: [2020-10-28 Wed 15:32] DEADLINE: <2020-10-28 Wed>
***** DONE search for popular NLI datasets which have existing RNN models as (almost) SOTAs, possibly use ones that were already tested for eg. RTC or ones used in papers that may have semantic element
      CLOSED: [2020-10-26 Mon 17:57] DEADLINE: <2020-10-28 Wed>
***** DONE explore below frameworks (by preference) and find most feasible one
      CLOSED: [2020-10-26 Mon 14:28] DEADLINE: <2020-10-26 Mon>
***** DONE add org-mode hook to remove startup visibility headers in org-mode to markdown conversion
      CLOSED: [2020-10-22 Thu 13:28]
***** DONE Set up repo, manuscript and develop log
      CLOSED: [2020-10-22 Thu 12:36]
      
** Legacy
*** Interpretable RNN architectures
**** State-regularized-RNNs (SR-RNNs)
***** good: very powerful and easily interpretable architecture with extensions to NLP and CV
***** good: simple code which can probably be ported to PyTorch relatively quickly
***** good: contact made with author and could get advice for possible extensions
***** problematic: code is outdated and written in Theano, TensorFlow version likely to be out by end of year
***** problematic: DFA extraction from SR-RNNs is clear, but DPDA extraction/visualization from SR-LSTMs is not clear probably because of no analog for discrete stack symbols from continuous cell (memory) states
***** possible extensions: port state-regularized RNNs to PyTorch (might be simple since code-base is generally simple), final conversion to REs for interpretability, global explainability for natural language, adding different loss to ensure words cluster to same centroid as much as possible -> or construct large automata, perhaps pursue sentiment analysis from SR-RNNs perspective instead and derive DFAs to model these
**** Rational recurences (RRNNs)
***** good: code quality in PyTorch, succinct and short
***** good: heavy mathematical background which could lend to more interesting mathematical analyses
***** problematic: seemingly missing interpretability section in paper -> theoretical and mathematical, which is good for understanding
***** problematic: hard to draw exact connection to interpretability, might take too long to understand everything
**** Finite-automation-RNNs (FA-RNNs)
***** source code likely released by November, but still requires initial REs which may not be present -> might not be the best fit
***** FA-RNNs involving REs and substitutions could be useful extensions as finite state transducers for interpretable neural machine translation

*** Interpretable surrogate extraction
***** overall more costly and less chance of high performance       
***** FSA/WFSA extraction
****** spectral learning, clustering
****** less direct interpretability
****** more proof of performance needed -> need to show it is better than simple data learning

*** Neuro-symbolic paradigms
***** research questions
****** can we train use a neuro-symbolic paradigm to attain high performance (similar to NNs) for NLP task(s)?
****** if so, can this paradigm provide us with greater explainability about the inner workings of the model?

*** Neural decision trees
***** decision trees are the same as logic programs -> the objective should be to learn logic programs
***** hierarchies are constructed in weight-space which lends itself to non-sequential models very well -> but problematic for token-level hierarchies
***** research questions
****** can we achieve similar high performance using decision tree distillation techniques (by imitating NNs)?
****** can this decision tree improve interpretability/explainability?
****** can this decision tree distillation technique outperform simple decision tree learning from training data?

*** Inductive logic on NLP search spaces
***** can potentially use existing IM models such as paraphrase detector for introspection purposes in thesis
***** n-gram power sets to explore for statistical artefacts -> ANNs can only access the search space of N-gram power sets -> solution to NLP tasks must be a statistical solution within the power sets which links back to symbolism
***** eg. differentiable ILP from DeepMind
***** propositional logic only contains atoms while predicate/first-order logic contain variables      
