#+STARTUP: overview

** Tasks
*** Research
**** Clean-code and documentation  
***** work on prototyping results from SoPa
****** unsure what self-loops and fwd-1s mean in patterns.log -> make GitHub issue to ask regarding this
****** TODO analyze pattern log more closely with code on the side to understand what it means -> can start writing early when things start to make sense
       DEADLINE: <2020-11-05 Thu>
****** research question could be whether SoPa could extend towards global explainability
****** think more about local vs. global explainability and how SoPa could help achieve this -> might have issues wrt. convergence as mentioned in paper
****** TODO write proposal with key research questions -> address points directly from step 3 document requirements -> prepare some basic accuracy metrics and interpretations from best model
       DEADLINE: <2020-11-06 Fri>
***** work on refactoring code and upgrading/porting dependencies to more recent versions
****** incoporate useful SOPs such as namespace saving and printing
****** issue of strange numbers of start and end tokens -> should be replaced with pad tokens
***** run tests on s3it with slurm
****** activate cuda-8.0 in sbatch scripts explicitly
****** use debug mode and low runtime for quick slurm runs
****** make list of all useful commands for slurm
***** update metadata in scripts later with new workflows, eg. with help scripts and comments describing functionality
***** add MIT license when made public

**** Interpretable neural architectures
***** Soft patterns (SoPa)
****** good: practical new architecture which maps to RNN-CNN mix via WFSAs
****** good: code quality in PyTorch, lengthy code
****** good: contact made with author and could get advice for possible extensions
****** problematic: global explainability might be a far shot, occlusion is still used for documents
****** problematic: not clear how this could be linked to a final WFSA -> perhaps it is ultimately not but it is still interpretable and explainable
****** possible extensions: improve on larger data, learnable word embeddings, sub-word pre-processing to leverage morphology, increase generalization with wildcards, improve interpretability via in-built method instead of occlusion in document analysis setting, final additive layer for finding relevance of patterns, multi-class tasks instead of only binary
***** *GIST:* likely higher performance due to direct inference and less costly
      
**** Data sets
***** NLU data sets -> single sequence intent classification, typically many classes involved -> eg. ATIS, Snips, AskUbuntuCorpus, FB task oriented dataset (mostly intent classifications)
***** NLI data sets -> two sequences for predicting entailment, contradiction, neutral -> eg. SNLI, MNLI, XNLI
***** SOTA scores for NLU can be found on https://github.com/nghuyong/rasa-nlu-benchmark#result
***** SOTA scores for NLI can be found on https://nlp.stanford.edu/projects/snli/
***** *consideration:* use both small and large data sets to get an idea of performance
***** *GIST:* easier to work with NLU data sets since these only involve one data set to start off with
 
**** Constraints
***** work with RNNs only
***** seq2cls tasks -> eg. NLU/NLI/semantic tasks, try to work with simpler single (vs. double) sequence classification task
***** base main ideas off peer-reviewed articles 

**** High-level
***** *globally explainable* -> exposes inner mechanisms and global biases which could help for ethical and adversarial problem detections
***** *high-performance* -> competitive with similar non-explainable learning techniques
***** *contributions* -> should add insights which are new and not commonly found in research so far
      
*** Admin
**** General timeline
***** +Initial thesis document: 15.09.20+
***** Topic proposal draft: 06.11.20
***** Topic proposal final: 15.11.20
***** Topic registration: 01.02.20  
***** Manuscript submission: 18.03.20, try to extend if possible  
***** *Note:* meeting every 3 weeks with Sharid and more regularly with Mathias 

**** Manuscript notes
***** semirings, abstract algebra and how they are used for finite-state machines in Forward and Viterbi algorithms -> go deeper into this to get some background
***** Chomsky hierarchy of languages -> might be relevant especially relating to CFGs
***** FSA/WFSAs -> input theoretical CS, mathematics background to describe these
***** ANN's historical literature -> describe how ANNs approximate symbolic representations
***** extension/recommendations -> transducer for seq2seq tasks
      
** Completed
***** DONE add large amounts of binary data for testing with CPU/GPU -> requires pre-processing
      CLOSED: [2020-11-03 Tue 21:07]
***** DONE find re-usable code for running grid search -> otherwise construct makeshift quick code
      CLOSED: [2020-11-05 Thu 20:38]
***** DONE test SoPa on sample data in repository to ensure it works out-of-the-box -> try this on laptop and s3it 
      CLOSED: [2020-11-02 Mon 16:40]
***** DONE make workflow to reproduce virtual environment cleanly via poetry
      CLOSED: [2020-11-02 Mon 16:34]
***** DONE make workflow to download simple but high-quality NLU dataset and glove data sets
      CLOSED: [2020-11-01 Sun 20:15] DEADLINE: <2020-11-01 Sun>
***** DONE read more into these tasks and find one that has potential for interpretability -> likely reduce task to binary case for easier processing (eg. entailment)
      CLOSED: [2020-10-28 Wed 15:32] DEADLINE: <2020-10-28 Wed>
***** DONE search for popular NLI datasets which have existing RNN models as (almost) SOTAs, possibly use ones that were already tested for eg. RTC or ones used in papers that may have semantic element
      CLOSED: [2020-10-26 Mon 17:57] DEADLINE: <2020-10-28 Wed>
***** DONE explore below frameworks (by preference) and find most feasible one
      CLOSED: [2020-10-26 Mon 14:28] DEADLINE: <2020-10-26 Mon>
***** DONE add org-mode hook to remove startup visibility headers in org-mode to markdown conversion
      CLOSED: [2020-10-22 Thu 13:28]
***** DONE Set up repo, manuscript and develop log
      CLOSED: [2020-10-22 Thu 12:36]
      
** Legacy
*** Interpretable RNN architectures
**** State-regularized-RNNs (SR-RNNs)
***** good: very powerful and easily interpretable architecture with extensions to NLP and CV
***** good: simple code which can probably be ported to PyTorch relatively quickly
***** good: contact made with author and could get advice for possible extensions
***** problematic: code is outdated and written in Theano, TensorFlow version likely to be out by end of year
***** problematic: DFA extraction from SR-RNNs is clear, but DPDA extraction/visualization from SR-LSTMs is not clear probably because of no analog for discrete stack symbols from continuous cell (memory) states
***** possible extensions: port state-regularized RNNs to PyTorch (might be simple since code-base is generally simple), final conversion to REs for interpretability, global explainability for natural language, adding different loss to ensure words cluster to same centroid as much as possible -> or construct large automata, perhaps pursue sentiment analysis from SR-RNNs perspective instead and derive DFAs to model these
**** Rational recurences (RRNNs)
***** good: code quality in PyTorch, succinct and short
***** good: heavy mathematical background which could lend to more interesting mathematical analyses
***** problematic: seemingly missing interpretability section in paper -> theoretical and mathematical, which is good for understanding
***** problematic: hard to draw exact connection to interpretability, might take too long to understand everything
**** Finite-automation-RNNs (FA-RNNs)
***** source code likely released by November, but still requires initial REs which may not be present -> might not be the best fit
***** FA-RNNs involving REs and substitutions could be useful extensions as finite state transducers for interpretable neural machine translation

*** Interpretable surrogate extraction
***** overall more costly and less chance of high performance       
***** FSA/WFSA extraction
****** spectral learning, clustering
****** less direct interpretability
****** more proof of performance needed -> need to show it is better than simple data learning

*** Neuro-symbolic paradigms
***** research questions:
****** can we train use a neuro-symbolic paradigm to attain high performance (similar to NNs) for NLP task(s)?
****** if so, can this paradigm provide us with greater explainability about the inner workings of the model?

*** Neural decision trees
***** decision trees are the same as logic programs -> the objective should be to learn logic programs
***** hierarchies are constructed in weight-space which lends itself to non-sequential models very well -> but problematic for token-level hierarchies
***** research questions:
****** can we achieve similar high performance using decision tree distillation techniques (by imitating NNs)?
****** can this decision tree improve interpretability/explainability?
****** can this decision tree distillation technique outperform simple decision tree learning from training data?

*** Inductive logic on NLP search spaces
***** can potentially use existing IM models such as paraphrase detector for introspection purposes in thesis
***** n-gram power sets to explore for statistical artefacts -> ANNs can only access the search space of N-gram power sets -> solution to NLP tasks must be a statistical solution within the power sets which links back to symbolism
***** eg. differentiable ILP from DeepMind
***** propositional logic only contains atoms while predicate/first-order logic contain variables      
